// <auto-generated />
using System;
using Lab6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab6.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Lab6.Data.Entities.ATMMachine", b =>
                {
                    b.Property<int>("ATMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ATMId");

                    b.ToTable("ATMMachines");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Card", b =>
                {
                    b.Property<int>("CardNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardTypeCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardholderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardNumber");

                    b.HasIndex("CardNumber")
                        .IsUnique();

                    b.HasIndex("CardTypeCode");

                    b.HasIndex("CardholderId");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Cardholder", b =>
                {
                    b.Property<int>("CardholderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CardholderId");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.ToTable("Cardholders");
                });

            modelBuilder.Entity("Lab6.Data.Entities.CardholderBank", b =>
                {
                    b.Property<int>("CardholderBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardholderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardholderBankId");

                    b.HasIndex("BankId");

                    b.HasIndex("CardholderId");

                    b.ToTable("CardholderBanks");
                });

            modelBuilder.Entity("Lab6.Data.Entities.FinancialTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ATMId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardNumberTransferFrom")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardNumberTransferTo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MerchantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionTypeCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.HasIndex("ATMId");

                    b.HasIndex("CardNumber");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("MerchantId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Merchant", b =>
                {
                    b.Property<int>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MerchantCategoryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MerchantId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("Lab6.Data.Entities.MerchantBank", b =>
                {
                    b.Property<int>("MerchantBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MerchantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MerchantBankId");

                    b.HasIndex("BankId");

                    b.HasIndex("MerchantId");

                    b.ToTable("MerchantBanks");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefCardType", b =>
                {
                    b.Property<int>("CardTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CardTypeCode");

                    b.ToTable("RefCardTypes");

                    b.HasData(
                        new
                        {
                            CardTypeCode = 1,
                            TypeName = "Credit"
                        },
                        new
                        {
                            CardTypeCode = 2,
                            TypeName = "Debit"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefCurrencyCode", b =>
                {
                    b.Property<int>("CurrencyCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CurrencyCode");

                    b.ToTable("RefCurrencyCodes");

                    b.HasData(
                        new
                        {
                            CurrencyCode = 1,
                            CurrencyName = "USD"
                        },
                        new
                        {
                            CurrencyCode = 2,
                            CurrencyName = "EUR"
                        });
                });

            modelBuilder.Entity("Lab6.Data.Entities.Card", b =>
                {
                    b.HasOne("Lab6.Data.Entities.RefCardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Cardholder", "Cardholder")
                        .WithMany("Cards")
                        .HasForeignKey("CardholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.RefCurrencyCode", "Currency")
                        .WithMany("Cards")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");

                    b.Navigation("Cardholder");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Lab6.Data.Entities.CardholderBank", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Bank", "Bank")
                        .WithMany("CardholderBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Cardholder", "Cardholder")
                        .WithMany("CardholderBanks")
                        .HasForeignKey("CardholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Cardholder");
                });

            modelBuilder.Entity("Lab6.Data.Entities.FinancialTransaction", b =>
                {
                    b.HasOne("Lab6.Data.Entities.ATMMachine", "ATM")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("ATMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.RefCurrencyCode", "Currency")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Merchant", "Merchant")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ATM");

                    b.Navigation("Card");

                    b.Navigation("Currency");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Lab6.Data.Entities.MerchantBank", b =>
                {
                    b.HasOne("Lab6.Data.Entities.Bank", "Bank")
                        .WithMany("MerchantBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Data.Entities.Merchant", "Merchant")
                        .WithMany("MerchantBanks")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Lab6.Data.Entities.ATMMachine", b =>
                {
                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Bank", b =>
                {
                    b.Navigation("CardholderBanks");

                    b.Navigation("MerchantBanks");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Cardholder", b =>
                {
                    b.Navigation("CardholderBanks");

                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Lab6.Data.Entities.Merchant", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("MerchantBanks");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefCardType", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Lab6.Data.Entities.RefCurrencyCode", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("FinancialTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
